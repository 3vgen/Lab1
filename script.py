import cv2
import asyncio
import logging
import psutil
from fastapi import FastAPI, Response, Request
from fastapi.responses import StreamingResponse
from fastapi.templating import Jinja2Templates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.FileHandler("server.log", encoding="utf-8")  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    ]
)
print("Hello World2!!!!")
app = FastAPI()
templates = Jinja2Templates(directory="templates")


class VideoStream:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–º"""

    def __init__(self, camera_index=0):
        self.camera_index = camera_index
        self.cap = cv2.VideoCapture(self.camera_index)

        if not self.cap.isOpened():
            logging.critical(f"[–ö–∞–º–µ—Ä–∞ {self.camera_index}] –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É")
            raise RuntimeError(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É {self.camera_index}")

        logging.info(f"[–ö–∞–º–µ—Ä–∞ {self.camera_index}] –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞")

    def __del__(self):
        if self.cap.isOpened():
            self.cap.release()
            logging.info(f"[–ö–∞–º–µ—Ä–∞ {self.camera_index}] –ó–∞–∫—Ä—ã—Ç–∞")

    def get_frame(self):
        ret, frame = self.cap.read()
        if not ret:
            logging.error("[–ö–∞–º–µ—Ä–∞] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞")
            return None

        _, buffer = cv2.imencode(".jpg", frame)
        return buffer.tobytes()


# –°–æ–∑–¥–∞—ë–º –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫
try:
    video_stream = VideoStream()
except Exception as e:
    logging.critical(f"[–û—à–∏–±–∫–∞] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–º–µ—Ä—ã: {e}")
    raise


async def video_generator():
    while True:
        frame = video_stream.get_frame()
        if frame is None:
            logging.error("[–í–∏–¥–µ–æ–ø–æ—Ç–æ–∫] –ö–∞–¥—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫")
            break

        yield (b"--frame\r\n"
               b"Content-Type: image/jpeg\r\n\r\n" + frame + b"\r\n")
        await asyncio.sleep(0.03)


@app.get("/video")
async def video_feed():
    logging.info("[API] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫")
    return StreamingResponse(video_generator(), media_type="multipart/x-mixed-replace; boundary=frame")


@app.get("/")
def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–º"""
    return templates.TemplateResponse("index.html", {"request": request})


@app.get("/logs")
def get_logs(request: Request):
    """–û—Ç–¥–∞—ë—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ª–æ–≥–∞–º–∏"""
    return templates.TemplateResponse("logs.html", {"request": request})


@app.get("/test_rout")
def get_logs():
    """–û—Ç–¥–∞—ë—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ª–æ–≥–∞–º–∏"""
    return {"message": "success"}


@app.get("/logs/live")
def stream_logs():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤"""
    try:
        with open("server.log", "r", encoding="utf-8") as f:
            logs = f.readlines()[-10:]  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
    except FileNotFoundError:
        logs = ["–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"]

    return Response("<br>".join(logs), media_type="text/html")


@app.get("/status")
def status():
    memory = psutil.virtual_memory()
    memory_usage = memory.used / (1024 ** 3)  # –í –≥–∏–≥–∞–±–∞–π—Ç–∞—Ö
    logging.info(f"[API] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.2f} GB")
    return {"status": "running", "memory_usage_gb": round(memory_usage, 2)}


logging.info("[–°–µ—Ä–≤–µ—Ä] FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω üöÄ")
